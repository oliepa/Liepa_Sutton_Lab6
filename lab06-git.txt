Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```

    Olivia Liepa

    Chris Sutton


    ```

D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```

    Returns a list of common git commands in the terminal with a short explanation of how they work.
	

    ```

2.  What does `-ag` cause `git help` to do?
   
    ```

    Returns a list of all of the available git commands and guides in the git library.


    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```

    Git status reports on the state of the local repository, and any changes to it. It also reports if the file is untracked, on the stage, or is in the local repository and is therefore ready to be pushed to the repository.


    ```

2.  What does `git add names.txt` do?

    ```

    This command adds the file to the stage.


    ```

3.  What does `git commit -m "Add our names."` do?

    ```

    This command commits the changes to the local repository so that they are ready to be pushed to the repository with the message “Add our names.”


    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```

    This command adds the files to the stage. The ‘.’ means all add files in the local repository that are untracked.


    ```

5.  What does `git commit` (without -m) do?

    ```

    This command takes us to a new window and allows the user to write a multiple lined message for the files that we are trying to commit.


    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```

    We should use git commit because it allows us to write multiple lines for a committed file.


    ```

7.  What does `git log do`?

    ```

    This command shows all the files that are committed to the local repository and when they were committed.


    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```

    modified: names.txt


    ```

    **Unstaged**

    ```

    modified: movies.txt


    ```

    **Untracked**

    ```

    foods.txt


    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```

    Only names.txt because we have not added the others to the stage.


    ```

2.  What command do you run to stage changes?

    ```

    git add spam.txt

    (where spam.txt is the file we want to stage)


    ```

3.  What command do you run to unstage changes?

    ```

    git reset spam.txt

    (where spam.txt is the file we want to unstage)


    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```

    This command shows the differences between a file that you have committed to the local repository and the modified version of that file that is unstaged.


    ```

2.  What does `git diff --cached` display?

    ```

     This command shows the differences between a file that you have committed to the local repository and the modified version of that file that is staged.


    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```

    git reset names.txt
    git add movies.txt


    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```

   Since one version of movies.txt was previously modified and added to the stage, this version shows up on the stage as modified movies.txt. However, since we just newly modified movies.txt, this newly modified version has not yet been added to the stage so it shows up with the unstaged files also as modified movies.txt.


    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```

    With the unstaged files, it says the deleted: names.txt because the file has been deleted from the unstaged files.


    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```

    The file movies.txt has been deleted and the new last-movies file is now untracked. This is because movies.txt is now untracked because we have changed the name of the file so last-movies.txt is recognized as a new file.


    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```

    git add .
    git commit 


    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```

    The index, cache, and stage all refer to where we are putting the files that are ready to be committed to the local repository.


    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?
    
    ```

    We shouldn’t commit all changes since the last commit just in case something has been changed that is not completely finished yet. Otherwise, this unfinished item would be committed to the repository. With a stage, we can go over our changes before we commit them and modify specific files with ease.


    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```

    This command allows us to undo our last commit so that the files that we changed are back on the stage.


    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```

    This command allows us to undo our last commit but deletes the files that we changed from the working tree. It basically returns us to where we were when we did the commit that it returns to.


    ```

2.  What is the difference between `--hard` and `--soft`?

    ```

    The —-soft command allows us to undo our last commit but only moves these files to the stage, while the —-hard command also allows us to undo the last commit but completely reverts to that previous commit, so we don’t have access to the files that we just un-committed anymore.


    ```

3.  What do you think `HEAD` means?

    ```

    I think that HEAD means the last commit that we made to the local repository.


    ```

4.  What do you think `HEAD^` means?

    ```

    I think that HEAD^ means the commit above the most recent commit that we have made to the local repository. So reverting to HEAD^ would undo our most recent commit and take us to the commit we made before that one.


    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
